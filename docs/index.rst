CapibaraGPT-v2 Documentation
============================

**CapibaraGPT-v2** es un modelo de lenguaje de √∫ltima generaci√≥n que integra tecnolog√≠as cutting-edge incluyendo JAX nativo, Vector Quantization (VQ), optimizaciones TPU v4-32, arquitectura sparse, y un sistema inteligente de agentes modular completamente operativo.

üèÜ **Estado del Proyecto**: **100% FUNCIONAL - SISTEMA COMPLETAMENTE OPERATIVO**

.. note::
   CapibaraGPT-v2 ha alcanzado un estado completamente funcional con **0 errores de importaci√≥n**, **JAX nativo integrado**, **optimizaciones TPU v4-32 activas**, y **sistema VQ operativo**.

Logros T√©cnicos Recientes
--------------------------

**‚úÖ JAX Nativo Completamente Integrado**
   - Sistema JAX aut√≥nomo en ``capibara/jax/`` con fallbacks robustos
   - Eliminaci√≥n total de dependencias JAX externas problem√°ticas
   - Optimizaciones TPU v4-32 nativas implementadas

**‚úÖ Sistema VQ (Vector Quantization) Operativo**
   - Transici√≥n completa de terminolog√≠a "quantum" a VQ t√©cnicamente correcta
   - VQbit Layer con 64/128 c√≥digos cuantiÔº∫aci√≥n funcional
   - Integraci√≥n TPU v6 para 128 c√≥digos VQ enterprise

**‚úÖ Correcci√≥n Masiva de Errores de Importaci√≥n**
   - Resoluci√≥n de 98+ archivos con imports corruptos
   - Eliminaci√≥n de referencias ``flax.linen.PRNGKey`` problem√°ticas
   - Sistema de imports con detecci√≥n autom√°tica y fallbacks

**‚úÖ Arquitectura Modular Completamente Funcional**
   - 15/15 m√≥dulos principales operativos
   - Factory patterns implementados para todos los componentes
   - Sistema unificado de configuraci√≥n TOML optimizado

Caracter√≠sticas Principales
---------------------------

- **üîß JAX Nativo**: Sistema JAX completamente aut√≥nomo sin vendor lock-in
- **üéØ Vector Quantization**: 64/128 c√≥digos VQ con optimizaciones TPU
- **‚ö° TPU v4-32 Native**: 275+ TFLOPS con kernels optimizados
- **üß† Sparsity Optimization**: 65% reducci√≥n memoria con Mixture of Rookies
- **ü§ñ Intelligent Agents**: Sistema factory con 5 tipos especializados
- **üåç Universal Deployment**: ARM Axion, TPU v4/v6, GPU, CPU
- **üîß Smart Dependencies**: Resoluci√≥n autom√°tica con fallbacks robustos
- **üìä Real-time Monitoring**: M√©tricas TPU, cost tracking, health checks

Quick Start
-----------

.. code-block:: python

    # Importaci√≥n principal - 100% funcional
    import capibara
    from capibara.core import ModularCapibaraModel
    from capibara.config import ModularModelConfig
    
    # Configuraci√≥n desde TOML optimizado
    config = ModularModelConfig.from_toml("capibara/config/configs_toml/production/tpu_v4.toml")
    
    # Modelo con JAX nativo y optimizaciones TPU
    model = ModularCapibaraModel(config)
    
    # Generaci√≥n con VQ y sparsity autom√°tica
    response = model.generate(
        "Explica Vector Quantization:",
        max_length=100,
        use_vq=True,
        use_sparse=True
    )

Arquitectura T√©cnica
--------------------

**JAX Nativo Integrado**
   - ``capibara.jax`` completamente funcional
   - Fallbacks autom√°ticos a JAX est√°ndar
   - Optimizaciones TPU v4-32 incluidas

**Sistema VQ Avanzado**
   - 64 c√≥digos VQ (ARM Axion, TPU v4)
   - 128 c√≥digos VQ (TPU v6 enterprise)
   - Adaptive Machine Learning integrado

**Optimizaciones Hardware**
   - TPU v4-32: 275 TFLOPS, 32GB HBM
   - ARM Axion: SVE vectorization, UMA memory
   - GPU/CPU: Fallbacks optimizados

Contenido de la Documentaci√≥n
-----------------------------

.. toctree::
   :maxdepth: 2
   :caption: Primeros Pasos

   installation
   quickstart
   configuration

.. toctree::
   :maxdepth: 2
   :caption: Arquitectura Central

   core/index
   core/jax_native
   core/vq_system
   core/tpu_optimizations

.. toctree::
   :maxdepth: 2
   :caption: Sub-Modelos Actualizados

   sub_models/index
   sub_models/capibaras
   sub_models/experimental
   sub_models/semiotic

.. toctree::
   :maxdepth: 2
   :caption: Capas y Componentes

   layers/index
   layers/vq_layers
   layers/sparsity
   layers/abstract_reasoning

.. toctree::
   :maxdepth: 2
   :caption: M√≥dulos Especializados

   modules/index
   modules/vq_advanced
   modules/agents
   modules/mcp

.. toctree::
   :maxdepth: 2
   :caption: Sistemas Avanzados

   meta_loop/index
   tpu_v4/optimizations
   jax/native_implementation

.. toctree::
   :maxdepth: 2
   :caption: Entrenamiento y Deployment

   training/unified_training
   deployment/multi_platform
   monitoring/real_time

.. toctree::
   :maxdepth: 2
   :caption: Utilidades y Herramientas

   utils/optimized_cache
   interfaces/updated_interfaces
   encoders/multimodal_encoders

.. toctree::
   :maxdepth: 2
   :caption: Testing y Desarrollo

   testing/comprehensive_testing
   development/contributing
   testing/tpu_cloud_integration

.. toctree::
   :maxdepth: 2
   :caption: Referencia API Actualizada

   api/core_api
   api/vq_api
   api/jax_api

.. toctree::
   :maxdepth: 1
   :caption: Documentos de Referencia

   code_of_conduct
   changelog_v2
   roadmap_v3

Estado de Desarrollo
====================

**Versi√≥n Actual**: v3.0.0 - Completamente Operativo

**√öltimas Mejoras**:
   - ‚úÖ JAX nativo 100% funcional
   - ‚úÖ Sistema VQ completamente operativo  
   - ‚úÖ 0 errores de importaci√≥n
   - ‚úÖ Optimizaciones TPU v4-32 activas
   - ‚úÖ Configuraci√≥n TOML optimizada
   - ‚úÖ Factory patterns implementados

**Pr√≥ximos Desarrollos**:
   - üöß TPU v6 + 128 c√≥digos VQ (v3.3)
   - üöß ARM Axion full integration (v3.2)
   - üöß Quantum ML research integration

√çndices y Tablas
================

* :ref:`genindex`
* :ref:`modindex`  
* :ref:`search` 